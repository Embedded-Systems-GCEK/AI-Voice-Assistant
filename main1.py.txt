import os
import json
import speech_recognition as sr
import pyttsx3
import google.generativeai as genai
from gtts import gTTS
import pygame
from langdetect import detect

# =======================
#  SETUP
# =======================
GEMINI_API_KEY = ""  # put your API key here
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.5-flash")

# English TTS engine
engine = pyttsx3.init()
engine.setProperty("rate", 180)
engine.setProperty("volume", 1.0)

recognizer = sr.Recognizer()
mic = sr.Microphone()

# =======================
#  MEMORY
# =======================
MEMORY_FILE = "karen_memory.json"

# default structure
memory = {"chat_history": [], "language_override": None}

# load if exists
if os.path.exists(MEMORY_FILE):
    try:
        with open(MEMORY_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)

            # backward compatibility
            if isinstance(data, list):  
                memory["chat_history"] = data
            elif isinstance(data, dict):
                memory.update(data)

    except Exception as e:
        print("‚ö†Ô∏è Could not load memory:", e)

chat_history = memory.get("chat_history", [])
language_override = memory.get("language_override", None)


def save_memory():
    memory["chat_history"] = chat_history
    memory["language_override"] = language_override
    with open(MEMORY_FILE, "w", encoding="utf-8") as f:
        json.dump(memory, f, indent=2, ensure_ascii=False)


# =======================
#  SPEAK FUNCTION
# =======================
def speak(text):
    global language_override
    lang = "en"

    if language_override:
        lang = language_override
    else:
        try:
            lang = detect(text)
        except:
            lang = "en"

    if lang == "en":
        engine.say(text)
        engine.runAndWait()
    else:
        # Use gTTS + pygame for non-English voices
        tts = gTTS(text=text, lang=lang)
        tts.save("temp.mp3")

        pygame.mixer.init()
        pygame.mixer.music.load("temp.mp3")
        pygame.mixer.music.play()

        # Wait until playback finishes
        while pygame.mixer.music.get_busy():
            pygame.time.Clock().tick(10)

        pygame.mixer.quit()
        os.remove("temp.mp3")


# =======================
#  ASK GEMINI
# =======================

def ask_gemini(question):
    global chat_history

    # Inject "system prompt" as a fake user instruction
    system_prompt = {
        "role": "user",
        "parts": [
            "Instruction: You are Karen, a helpful AI assistant. "
            "Always reply briefly, clearly, and to the point (max 2‚Äì3 sentences)."
        ],
    }

    # Combine system-style instruction, history, and user query
    full_history = [system_prompt] + chat_history + [{"role": "user", "parts": [question]}]

    try:
        response = model.generate_content(full_history)
        reply = getattr(response, "text", "Sorry, I couldn‚Äôt generate a response.")

        # Save conversation
        chat_history.append({"role": "user", "parts": [question]})
        chat_history.append({"role": "model", "parts": [reply]})
        save_memory()

        return reply.strip()
    except Exception as e:
        return f"Error: {str(e)}"

# =======================
#  LISTEN
# =======================
def listen():
    with mic as source:
        print("üé§ Listening...")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source)

    try:
        # Choose language based on override (default English)
        lang = "en-US"
        if language_override == "hi":
            lang = "hi-IN"
        elif language_override == "ml":
            lang = "ml-IN"

        query = recognizer.recognize_google(audio, language=lang)
        print(f"üó£ You said: {query}")
        return query
    except sr.UnknownValueError:
        return None
    except sr.RequestError:
        return None


# =======================
#  MAIN LOOP
# =======================
if __name__ == "__main__":
    speak("Hello, I am Karen, your AI Assistant. Ask me anything!")

    while True:
        query = listen()
        if not query:
            continue

        if "exit" in query.lower() or "quit" in query.lower():
            speak("Goodbye!")
            break

        # Language override commands
        if "reply in hindi" in query.lower():
            language_override = "hi"
            save_memory()
            speak("‡§†‡•Ä‡§ï ‡§π‡•à, ‡§Ö‡§¨ ‡§Æ‡•à‡§Ç ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•Ç‡§Å‡§ó‡§æ‡•§")
            continue
        elif "reply in malayalam" in query.lower():
            language_override = "ml"
            save_memory()
            speak("‡¥∂‡¥∞‡¥ø, ‡¥á‡¥®‡¥ø ‡¥û‡¥æ‡µª ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥Æ‡¥±‡µÅ‡¥™‡¥ü‡¥ø ‡¥®‡µΩ‡¥ï‡µÅ‡¥Ç.")
            continue
        elif "reply in english" in query.lower():
            language_override = "en"
            save_memory()
            speak("Okay, now I will reply in English.")
            continue
        elif "reply auto" in query.lower():
            language_override = None
            save_memory()
            speak("Okay, I will detect the language automatically.")
            continue

        # Normal conversation
        answer = ask_gemini(query)
        print(f"ü§ñ Karen: {answer}")
        speak(answer)
