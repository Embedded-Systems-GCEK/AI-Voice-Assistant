name: CI - Test and Validate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run setup verification
      run: |
        python test_setup.py
    
    - name: Test demo mode
      run: |
        # Test demo mode with automated input
        echo -e "hello\nwhat can you do\nexit" | python demo.py
    
    - name: Test core functionality
      run: |
        # Test core modules can be imported
        python -c "
        import sys
        sys.path.append('src')
        
        try:
            import assistant
            import files
            import status
            print('✅ Core modules import successfully')
        except ImportError as e:
            print(f'❌ Import error: {e}')
            sys.exit(1)
        
        # Test dictionary loading
        try:
            from files import load_dictionaries
            data = load_dictionaries()
            if data:
                print('✅ Dictionaries loaded successfully')
            else:
                print('❌ Dictionary loading failed')
                sys.exit(1)
        except Exception as e:
            print(f'❌ Dictionary test failed: {e}')
            sys.exit(1)
        "
    
    - name: Validate project structure
      run: |
        python -c "
        import os
        import sys
        
        required_files = [
            'README.md',
            'requirements.txt',
            'dictionaries.json',
            'demo.py',
            'test_setup.py',
            'install.py',
            'src/app.py',
            'src/assistant.py',
            'CONTRIBUTING.md',
            'CODE_OF_CONDUCT.md'
        ]
        
        missing_files = []
        for file in required_files:
            if not os.path.exists(file):
                missing_files.append(file)
        
        if missing_files:
            print(f'❌ Missing required files: {missing_files}')
            sys.exit(1)
        else:
            print('✅ All required files present')
        "

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Check code formatting with black
      run: |
        black --check --diff src/ demo.py test_setup.py install.py || true
    
    - name: Check imports with isort
      run: |
        isort --check-only --diff src/ demo.py test_setup.py install.py || true
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 src/ demo.py test_setup.py install.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 src/ demo.py test_setup.py install.py --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics || true

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security scan with bandit
      run: |
        bandit -r src/ -f json || true
    
    - name: Check dependencies for security vulnerabilities
      run: |
        safety check --json || true